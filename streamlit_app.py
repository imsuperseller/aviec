# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lBYcd3YSFvy9hdTDtv538JnnMC2Dpiqb
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.linear_model import LinearRegression

# Assuming 'df' is your final DataFrame from the extraction
# Replace NaN with 'Not Applicable' for readability in specific columns
df.fillna({'Sold_Price': 'Not Applicable', 'Sale_List_Ratio': 'Not Applicable', 'Sold_Date': 'Not Applicable'}, inplace=True)

# Summary Analysis
print("\n---- Summary Statistics ----\n")
summary_stats = df.groupby('Status').agg(
    Total_Listings=('MLS_ID', 'count'),
    Avg_List_Price=('List_Price', lambda x: pd.to_numeric(x, errors='coerce').mean()),
    Avg_Sold_Price=('Sold_Price', lambda x: pd.to_numeric(x, errors='coerce').mean()),
    Avg_Sale_List_Ratio=('Sale_List_Ratio', lambda x: pd.to_numeric(x.str.replace('%', '', regex=True), errors='coerce').mean()),
    Median_List_Price=('List_Price', lambda x: pd.to_numeric(x, errors='coerce').median()),
    Median_Sold_Price=('Sold_Price', lambda x: pd.to_numeric(x, errors='coerce').median())
).reset_index()

# Replace NaN with readable values in summary stats after calculations
summary_stats.fillna({'Avg_Sold_Price': 'Not Applicable', 'Avg_Sale_List_Ratio': 'Not Applicable'}, inplace=True)
print(summary_stats)

# Calculate Average DOM for each Status if the column 'CDOM' exists
if 'CDOM' in df.columns:
    summary_stats['Avg_DOM'] = df.groupby('Status')['CDOM'].mean().reset_index(drop=True)
else:
    summary_stats['Avg_DOM'] = 'Not Applicable'

# Count the number of properties with pools by Status if the 'Pool' column exists
if 'Pool' in df.columns:
    summary_stats['Properties_with_Pool'] = df[df['Pool'] == 'Yes'].groupby('Status')['MLS_ID'].count().reindex(summary_stats['Status']).fillna(0).reset_index(drop=True)
else:
    summary_stats['Properties_with_Pool'] = 0

# Save the results to a CSV file for easier sharing
summary_stats.to_csv('updated_property_statistics.csv', index=False)

# Display a few rows of the final DataFrame for verification
print("\n---- Extracted Listings Data ----\n")
print(df.head())

# Basic Visualization
# Enhanced visualization settings
sns.set(style="whitegrid")

# Plot Total Listings by Status
plt.figure(figsize=(8, 5))
sns.barplot(x='Status', y='Total_Listings', data=summary_stats, palette='viridis', hue='Status', dodge=False)
plt.xlabel('Status')
plt.ylabel('Total Listings')
plt.title('Total Property Listings by Status')

# Adding value labels to the bars
for index, value in enumerate(summary_stats['Total_Listings']):
    plt.text(index, value + 0.1, str(value), ha='center', fontsize=10, color='black')

plt.show()

# List Price Distribution
plt.figure(figsize=(10, 6))
plt.hist(df['List_Price'].dropna(), bins=20, edgecolor='black', color='skyblue')
plt.xlabel('List Price ($)')
plt.ylabel('Frequency')
plt.title('Distribution of List Prices')
plt.grid(True)
plt.show()

# Sold Price Distribution
plt.figure(figsize=(10, 6))
plt.hist(df['Sold_Price'][df['Sold_Price'] != 'Not Applicable'].dropna().astype(float), bins=20, edgecolor='black', color='lightcoral')
plt.xlabel('Sold Price ($)')
plt.ylabel('Frequency')
plt.title('Distribution of Sold Prices')
plt.grid(True)
plt.show()

# Scatter Plot: SqFt vs List Price
filtered_df_lp = df.dropna(subset=['SqFt', 'List_Price'])
plt.figure(figsize=(10, 6))
plt.scatter(filtered_df_lp['SqFt'], pd.to_numeric(filtered_df_lp['List_Price'], errors='coerce'), alpha=0.5, color='dodgerblue')
plt.xlabel('SqFt')
plt.ylabel('List Price ($)')
plt.title('Property Size vs List Price')
plt.grid(True)

# Adding a trend line
x = filtered_df_lp['SqFt'].values.reshape(-1, 1)
y = pd.to_numeric(filtered_df_lp['List_Price'], errors='coerce').values.reshape(-1, 1)
model = LinearRegression().fit(x, y)
plt.plot(filtered_df_lp['SqFt'], model.predict(x), color='red', linewidth=2)
plt.show()

# Scatter Plot: SqFt vs Sold Price
filtered_df_sp = df[(df['Sold_Price'] != 'Not Applicable') & df['SqFt'].notna()]
plt.figure(figsize=(10, 6))
plt.scatter(filtered_df_sp['SqFt'], pd.to_numeric(filtered_df_sp['Sold_Price'], errors='coerce'), alpha=0.5, color='orange')
plt.xlabel('SqFt')
plt.ylabel('Sold Price ($)')
plt.title('Property Size vs Sold Price')
plt.grid(True)

# Adding a trend line
x_sold = filtered_df_sp['SqFt'].values.reshape(-1, 1)
y_sold = pd.to_numeric(filtered_df_sp['Sold_Price'], errors='coerce').values.reshape(-1, 1)
model_sold = LinearRegression().fit(x_sold, y_sold)
plt.plot(filtered_df_sp['SqFt'], model_sold.predict(x_sold), color='red', linewidth=2)
plt.show()

# Average Days on Market (DOM) by Status (if available)
if 'Avg_DOM' in summary_stats.columns and not isinstance(summary_stats['Avg_DOM'].iloc[0], str):
    plt.figure(figsize=(8, 5))
    sns.barplot(x='Status', y='Avg_DOM', data=summary_stats, palette='coolwarm', hue='Status', dodge=False)
    plt.xlabel('Status')
    plt.ylabel('Average Days on Market (DOM)')
    plt.title('Average Days on Market by Status')

    # Adding value labels
    for index, value in enumerate(summary_stats['Avg_DOM']):
        plt.text(index, value + 0.5, str(round(value, 1)), ha='center', fontsize=10, color='black')

    plt.show()